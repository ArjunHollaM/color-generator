{"version":3,"sources":["SingleColor.js","App.js","reportWebVitals.js","index.js"],"names":["SingleColor","rgb","weight","index","hexColor","colorvariation","num","useState","alert","setAlert","bcg","join","hexValue","useEffect","Timeout","setTimeout","clearTimeout","className","style","backgroundColor","onClick","navigator","clipboard","writeText","App","colors","color","setColor","error","setError","variation","setVariation","Values","all","list","setList","setColorVariation","onSubmit","e","preventDefault","console","log","type","value","onChange","target","placeholder","randomColor","Math","floor","random","toString","id","map","hex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAuBeA,EArBK,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,IAAIC,EAA8C,EAA9CA,OAAOC,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,eAC5C,GADoE,EAATC,IACjCC,oBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAMT,EAAIU,KAAK,KACfC,EAAQ,WAAOR,GAKrB,OAJAS,qBAAU,WACN,IAAMC,EAAUC,YAAW,WAAON,GAAS,KAAQ,KACnD,OAAO,kBAAIO,aAAaF,MAC1B,CAACN,IACK,0BAASS,UAAS,gBAAWd,EAAQE,GAAkB,eAC/Da,MAAO,CAACC,gBAAgB,OAAD,OAAQT,EAAR,MACvBU,QAAS,WACLX,GAAS,GACTY,UAAUC,UAAUC,UAAUX,IAJ1B,UAOP,oBAAGK,UAAU,gBAAb,UAA8Bf,EAA9B,OACA,mBAAGe,UAAU,cAAb,SAA4BL,IAC3BJ,GAAS,mBAAGS,UAAU,QAAb,qC,gBCuEAO,MAtFf,WACE,IAAIC,EACJ,EAA0BlB,mBAAS,WAAnC,mBAAOmB,EAAP,KAAcC,EAAd,KACA,EAA0BpB,oBAAS,GAAnC,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAAkCtB,mBAAS,IAA3C,mBAAOuB,EAAP,KAAkBC,EAAlB,KACA,EAAwBxB,mBAAS,IAAIyB,IAAO,WAAWC,IAAIH,IAA3D,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAA4C5B,mBAAS,IAArD,mBAAOF,EAAP,KAAuB+B,EAAvB,KA8BA,OACE,qCACE,0BAASnB,UAAU,SAAnB,UACE,8BAAK,mDACL,uBAAMA,UAAU,UAAUoB,SApBX,SAACC,GACpBA,EAAEC,iBACFV,GAAS,GACT,IACEJ,EAAS,IAAIO,IAAON,GAAOO,IAAIH,GAC/BK,EAAQV,GACRe,QAAQC,IAAIhB,GACZ,MAAOG,GACPC,GAAS,GACTW,QAAQC,IAAIb,KAWV,UACE,uBACEc,KAAK,OACLC,MAAOjB,EACPkB,SAAU,SAACN,GAAD,OAAOX,EAASW,EAAEO,OAAOF,QACnCG,YAAY,UACZ7B,UAAS,UAAKW,EAAQ,QAAU,QAElC,wBAAQX,UAAU,MAAMyB,KAAK,SAA7B,oBAGA,uBAAOzB,UAAU,cAAcyB,KAAK,QAAQE,SAnBjC,SAACN,GAClBX,EAASW,EAAEO,OAAOF,QAkBsDA,MAAOjB,IACzE,wBAAQT,UAAU,MAAMG,QArCJ,WAE1B,IAAI2B,EAAc,IAAIC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAClExB,EAASoB,IAkCH,mCACA,yBAAQ9B,UAAU,eAAlB,UACE,qBAAKA,UAAU,kBAAkByB,KAAK,SAASU,GAAG,sBAAsB,iBAAe,WAAW,gBAAc,QAAhH,8BAGA,qBAAInC,UAAU,gBAAgB,kBAAgB,sBAA9C,UACE,6BAAI,mBAAGA,UAAU,gBAAgBG,QAhDxB,WAAOW,EAAa,GAAGK,EAAkB,MAgD9C,kBACJ,6BAAI,mBAAGnB,UAAU,gBAAgBG,QAhDxB,WAAOW,EAAa,GAAGK,EAAkB,KAgD9C,kBACJ,6BAAI,mBAAGnB,UAAU,gBAAgBG,QAhDxB,WAAOW,EAAa,GAAGK,EAAkB,KAgD9C,kBACJ,6BAAI,mBAAGnB,UAAU,gBAAgBG,QAhDxB,WAAOW,EAAa,GAAGK,EAAkB,KAgD9C,kBACJ,6BAAI,mBAAGnB,UAAU,gBAAgBG,QArDxB,WAAOW,EAAa,GAAGK,EAAkB,KAqD9C,kBACJ,6BAAI,mBAAGnB,UAAU,gBAAgBG,QAvDvB,WAAOW,EAAa,IAAIK,EAAkB,KAuDhD,mBACJ,6BAAI,mBAAGnB,UAAU,gBAAgBG,QAzDvB,WAAOW,EAAa,IAAIK,EAAkB,IAyDhD,+BAKZ,yBAASnB,UAAU,SAAnB,SACGiB,EAAKmB,KAAI,SAAC3B,EAAOvB,GAChB,OACE,cAAC,EAAD,2BAEMuB,GAFN,IAGEvB,MAAOA,EACPC,SAAUsB,EAAM4B,IAChBjD,eAAgBA,IAJXF,YCjEJoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76466f41.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst SingleColor = ({rgb,weight,index,hexColor,colorvariation,num}) => {\r\n    const [alert, setAlert] = useState(false);\r\n    const bcg = rgb.join(',')\r\n    const hexValue = `#${hexColor}`\r\n    useEffect(() => {\r\n        const Timeout = setTimeout(() => {setAlert(false)},3000)\r\n        return ()=>clearTimeout(Timeout)\r\n    },[alert])\r\n    return (<article className={`color ${index > colorvariation && 'color-light'}`} \r\n    style={{backgroundColor:`rgb(${bcg})`}} \r\n    onClick={() => {\r\n        setAlert(true)\r\n        navigator.clipboard.writeText(hexValue)\r\n        }}\r\n        >\r\n     <p className='percent-value'>{weight}%</p>\r\n     <p className='color-value'>{hexValue}</p>\r\n     {alert && <p className='alert'>copied to clipboard</p>}\r\n    </article>)\r\n}\r\n\r\nexport default SingleColor;","import React, { useState } from 'react'\nimport SingleColor from './SingleColor'\nimport Values from 'values.js'\n\nfunction App() {\n  let colors;\n  const [color, setColor] = useState('#700b97')\n  const [error, setError] = useState(false)\n  const [variation, setVariation] = useState(10)\n  const [list, setList] = useState(new Values('#700b97').all(variation))\n  const [colorvariation, setColorVariation] = useState(10)\n  const changevarto20 = () => {setVariation(20);setColorVariation(5);}\n  const changevarto10 = () => {setVariation(10);setColorVariation(10);}\n  const changevarto5 = () => {setVariation(5);setColorVariation(20);}\n  const changevarto1 = () => {setVariation(1);setColorVariation(100)}\n  const changevarto2 = () => {setVariation(2);setColorVariation(50);}\n  const changevarto3 = () => {setVariation(3);setColorVariation(33);}\n  const changevarto4 = () => {setVariation(4);setColorVariation(25);}\n  \n  const generateRandomColor = () =>\n{\n    let randomColor = '#'+Math.floor(Math.random()*16777215).toString(16);\n    setColor(randomColor)\n}\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setError(false)\n    try {\n      colors = new Values(color).all(variation)\n      setList(colors)\n      console.log(colors)\n    } catch (error) {\n      setError(true)\n      console.log(error)\n    }\n  }\n  const colorInput = (e) => {\n    setColor(e.target.value)\n  }\n\n  return (\n    <>\n      <section className='navbar'>\n        <div><h3>color generator</h3></div>\n        <form className='buttons' onSubmit={handleSubmit}>\n          <input\n            type='text'\n            value={color}\n            onChange={(e) => setColor(e.target.value)}\n            placeholder='#700b97'\n            className={`${error ? 'error' : null}`}\n          />\n          <button className='btn' type='submit'>\n            submit\n          </button>\n          <input className='colorPicker' type='color' onChange={colorInput} value={color}/>\n          <button className='btn' onClick={generateRandomColor}>Generate Random Color</button>\n          <button className=\"btn dropdown\">\n            <div className=\"dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n              Select Variation\n            </div>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n              <li><i className=\"dropdown-item\" onClick={changevarto1} >1%</i></li>\n              <li><i className=\"dropdown-item\" onClick={changevarto2} >2%</i></li>\n              <li><i className=\"dropdown-item\" onClick={changevarto3} >3%</i></li>\n              <li><i className=\"dropdown-item\" onClick={changevarto4} >4%</i></li>\n              <li><i className=\"dropdown-item\" onClick={changevarto5} >5%</i></li>\n              <li><i className=\"dropdown-item\" onClick={changevarto10} >10%</i></li>\n              <li><i className=\"dropdown-item\" onClick={changevarto20} >20%</i></li>\n            </ul>\n          </button>\n          </form>\n      </section>\n      <section className='colors'>\n        {list.map((color, index) => {\n          return (\n            <SingleColor\n              key={index}\n              {...color}\n              index={index}\n              hexColor={color.hex}\n              colorvariation={colorvariation}\n            />\n          )\n        })}\n      </section>\n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}